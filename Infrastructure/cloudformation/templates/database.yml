AWSTemplateFormatVersion: '2010-09-09'
Description: '3-Tier Architecture Infrastructure - Database Stack'

Parameters:
  DbSecurityGroupId:
    Description: Security group ID for database instances
    Type: String

  PrivateDbSubnet1Id:
    Description: ID of the first private DB subnet
    Type: String

  PrivateDbSubnet2Id:
    Description: ID of the second private DB subnet
    Type: String

  DbInstanceClass:
    Description: Database instance class
    Type: String
    Default: db.t3.micro

  DbEngine:
    Description: Database engine
    Type: String
    Default: mysql

  DbEngineVersion:
    Description: Database engine version
    Type: String
    Default: 8.0.32

  DbName:
    Description: Database name
    Type: String
    Default: CF-data_tier_db

  DbAdminUsername:
    Description: Database admin username
    Type: String
    Default: admin

Resources:
  # DB Subnet Group
  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: data-tier-subnet-group
      DBSubnetGroupDescription: Data Tier DB Subnet Group
      SubnetIds:
        - !Ref PrivateDbSubnet1Id
        - !Ref PrivateDbSubnet2Id
      Tags:
        - Key: Name
          Value: CF-Data Tier DB Subnet Group
        - Key: Environment
          Value: Production
        - Key: Tier
          Value: Data
        - Key: ManagedBy
          Value: CloudFormation
        - Key: Role
          Value: DatabaseSubnetGroup

  # Master Secret for Database
  DatabaseMasterSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${AWS::StackName}-DatabaseMasterSecret
      Description: Credentials for the database admin user
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${DbAdminUsername}"}'
        GenerateStringKey: password
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

  # Primary RDS Instance
  PrimaryDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: data-tier-db-1
      AllocatedStorage: 10
      DBName: !Ref DbName
      Engine: !Ref DbEngine
      EngineVersion: !Ref DbEngineVersion
      DBInstanceClass: !Ref DbInstanceClass
      MasterUsername: !Ref DbAdminUsername
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${DatabaseMasterSecret}:SecretString:password}}'
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      VPCSecurityGroups: 
        - !Ref DbSecurityGroupId
      MultiAZ: false
      PubliclyAccessible: false
      AvailabilityZone: eu-west-1a
      Tags:
        - Key: Name
          Value: CF-Data-Tier-DB-1
        - Key: Environment
          Value: Production
        - Key: Tier
          Value: Data
        - Key: ManagedBy
          Value: CloudFormation
        - Key: Role
          Value: MySQL-Database
        - Key: Replica
          Value: Primary

  # Secondary RDS Instance
  SecondaryDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: data-tier-db-2
      AllocatedStorage: 10
      DBName: !Ref DbName
      Engine: !Ref DbEngine
      EngineVersion: !Ref DbEngineVersion
      DBInstanceClass: !Ref DbInstanceClass
      MasterUsername: !Ref DbAdminUsername
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${DatabaseMasterSecret}:SecretString:password}}'
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      VPCSecurityGroups: 
        - !Ref DbSecurityGroupId
      MultiAZ: false
      PubliclyAccessible: false
      AvailabilityZone: eu-west-1b
      Tags:
        - Key: Name
          Value: CF-Data-Tier-DB-2
        - Key: Environment
          Value: Production
        - Key: Tier
          Value: Data
        - Key: ManagedBy
          Value: CloudFormation
        - Key: Role
          Value: MySQL-Database
        - Key: Replica
          Value: Secondary

Outputs:
  PrimaryDBEndpoint:
    Description: Connection endpoint for the primary database
    Value: !GetAtt PrimaryDBInstance.Endpoint.Address
    Export:
      Name: !Sub "${AWS::StackName}-PrimaryDBEndpoint"

  SecondaryDBEndpoint:
    Description: Connection endpoint for the secondary database
    Value: !GetAtt SecondaryDBInstance.Endpoint.Address
    Export:
      Name: !Sub "${AWS::StackName}-SecondaryDBEndpoint"

  DatabaseName:
    Description: Database name
    Value: !Ref DbName
    Export:
      Name: !Sub "${AWS::StackName}-DatabaseName"

  DatabaseUsername:
    Description: Database admin username
    Value: !Ref DbAdminUsername
    Export:
      Name: !Sub "${AWS::StackName}-DatabaseUsername"