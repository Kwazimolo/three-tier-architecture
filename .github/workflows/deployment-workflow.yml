# .github/workflows/deployment-workflow.yml

name: Deployment Analysis

on:
  workflow_call:
    inputs:
      tool:
        required: true
        type: string
        description: 'The IaC tool to analyse for deployment (terraform, cloudformation, opentofu)'
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  analyse-deployment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: terraform # Branch name
        
      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'
          
      - name: Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Install dependencies
        run: |
          pip install psutil boto3 awscli
          mkdir -p results/deployment
          
      - name: Setup Tools
        run: |
          # Install Terraform
          curl -fsSL https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip -o terraform.zip
          unzip terraform.zip
          sudo mv terraform /usr/local/bin/
          terraform --version
          
          # Install OpenTofu
          curl -fsSL https://github.com/opentofu/opentofu/releases/download/v1.6.0/tofu_1.6.0_linux_amd64.zip -o opentofu.zip
          unzip opentofu.zip
          sudo mv tofu /usr/local/bin/
          tofu --version
          
      - name: Prepare deployment
        run: |
          
          # Enable CloudTrail logging for API calls
          aws cloudtrail create-trail --name "DeploymentAnalysisTrail-$TIMESTAMP" \
            --s3-bucket-name tf-state-3tier-architecture \
            --s3-key-prefix cloudtrail \
            --is3-bucket-owner-check \
            || echo "Using default CloudTrail"
          
          # Record metrics start time
          echo "START_TIME=$(date +%s)" >> $GITHUB_ENV
          echo "Deployment starting at $(date)"
      
      #################################
      ## TERRAFORM DEPLOYMENT
      #################################
      - name: Deploy with Terraform
        if: inputs.tool == 'terraform'
        run: |
          cd infrastructure/terraform
          
          # Measure init time
          echo "INIT_START=$(date +%s)" >> $GITHUB_ENV
          terraform init
          echo "INIT_END=$(date +%s)" >> $GITHUB_ENV
          
          # Measure apply time
          echo "APPLY_START=$(date +%s)" >> $GITHUB_ENV
          terraform apply -auto-approve -var="stack_name=${{ env.STACK_NAME }}"
          echo "APPLY_END=$(date +%s)" >> $GITHUB_ENV
          
          # Calculate times
          INIT_DURATION=$((INIT_END - INIT_START))
          APPLY_DURATION=$((APPLY_END - APPLY_START))
          TOTAL_DURATION=$((APPLY_END - INIT_START))
          
          echo "Terraform init time: ${INIT_DURATION}s"
          echo "Terraform apply time: ${APPLY_DURATION}s"
          echo "Total deployment time: ${TOTAL_DURATION}s"
          
          # Create simple deployment report
          cat > ../../results/deployment/terraform_deployment_report.json << EOF
          {
            "tool": "terraform",
            "stack_name": "${{ env.STACK_NAME }}",
            "init_time_seconds": $INIT_DURATION,
            "apply_time_seconds": $APPLY_DURATION,
            "total_time_seconds": $TOTAL_DURATION,
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          }
          EOF
      
      #################################
      ## OPENTOFU DEPLOYMENT
      #################################
      - name: Deploy with OpenTofu
        if: inputs.tool == 'opentofu'
        run: |
          cd infrastructure/opentofu
          
          # Measure init time
          echo "INIT_START=$(date +%s)" >> $GITHUB_ENV
          tofu init
          echo "INIT_END=$(date +%s)" >> $GITHUB_ENV
          
          # Measure apply time
          echo "APPLY_START=$(date +%s)" >> $GITHUB_ENV
          tofu apply -auto-approve -var="stack_name=${{ env.STACK_NAME }}"
          echo "APPLY_END=$(date +%s)" >> $GITHUB_ENV
          
          # Calculate times
          INIT_DURATION=$((INIT_END - INIT_START))
          APPLY_DURATION=$((APPLY_END - APPLY_START))
          TOTAL_DURATION=$((APPLY_END - INIT_START))
          
          echo "OpenTofu init time: ${INIT_DURATION}s"
          echo "OpenTofu apply time: ${APPLY_DURATION}s"
          echo "Total deployment time: ${TOTAL_DURATION}s"
          
          # Create simple deployment report
          cat > ../../results/deployment/opentofu_deployment_report.json << EOF
          {
            "tool": "opentofu",
            "stack_name": "${{ env.STACK_NAME }}",
            "init_time_seconds": $INIT_DURATION,
            "apply_time_seconds": $APPLY_DURATION,
            "total_time_seconds": $TOTAL_DURATION,
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          }
          EOF
      
      #################################
      ## CLOUDFORMATION DEPLOYMENT
      #################################
      - name: Deploy with CloudFormation
        if: inputs.tool == 'cloudformation'
        run: |
          cd infrastructure/cloudformation
          
          # Set the stack name environment variable for later use
          echo "STACK_NAME=three-tier-architecture" >> $GITHUB_ENV
          
          # Measure deployment time
          echo "DEPLOY_START=$(date +%s)" >> $GITHUB_ENV
          
          # Run the deployment script
          ./scripts/deploy.sh || {
            # If deployment fails, capture stack events for debugging
            echo "Deployment failed. Collecting stack events for debugging..."
            aws cloudformation describe-stack-events --stack-name three-tier-architecture --region eu-west-1 > ../../results/deployment/cloudformation_stack_events.json
            
            # Attempt to clean up failed stack
            echo "Cleaning up failed stack..."
            aws cloudformation delete-stack --stack-name three-tier-architecture --region eu-west-1
            
            # Record the failure
            echo "Deployment failed. Check stack events in the artifacts." > ../../results/deployment/cloudformation_deployment_failure.txt
            exit 1
          }
          
          echo "DEPLOY_END=$(date +%s)" >> $GITHUB_ENV
          
          # Calculate time
          DEPLOY_DURATION=$((DEPLOY_END - DEPLOY_START))
          
          echo "CloudFormation deployment time: ${DEPLOY_DURATION}s"
          
          # Create simple deployment report
          cat > ../../results/deployment/cloudformation_deployment_report.json << EOF
          {
            "tool": "cloudformation",
            "stack_name": "three-tier-architecture",
            "deploy_time_seconds": $DEPLOY_DURATION,
            "total_time_seconds": $DEPLOY_DURATION,
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          }
          EOF
      
      #################################
      ## API CALLS COLLECTION
      #################################
      - name: Collect API calls
        run: |
          # Record end time
          echo "END_TIME=$(date +%s)" >> $GITHUB_ENV
          
          # Wait for CloudTrail events to be available
          echo "Waiting for CloudTrail events to be available..."
          sleep 30
          
          # Get CloudTrail events for the deployment
          aws cloudtrail lookup-events \
            --lookup-attributes AttributeKey=ResourceName,AttributeValue=${{ env.STACK_NAME }} \
            > results/deployment/${{ inputs.tool }}_cloudtrail_events.json
          
          # Count API calls by service
          python - << EOF
          import json
          import os
          
          # Load CloudTrail events
          with open('results/deployment/${{ inputs.tool }}_cloudtrail_events.json', 'r') as f:
              events_data = json.load(f)
          
          # Count API calls by service
          service_counts = {}
          for event in events_data.get('Events', []):
              if isinstance(event, dict) and 'CloudTrailEvent' in event:
                  try:
                      cloud_trail_event = json.loads(event['CloudTrailEvent'])
                      event_source = cloud_trail_event.get('eventSource', '')
                      
                      # Extract service name
                      if event_source:
                          service = event_source.split('.')[0]
                          if service not in service_counts:
                              service_counts[service] = 0
                          service_counts[service] += 1
                  except Exception as e:
                      pass
          
          # Calculate total
          total_calls = sum(service_counts.values())
          
          # Load existing report
          report_file = f'results/deployment/${{ inputs.tool }}_deployment_report.json'
          with open(report_file, 'r') as f:
              report = json.load(f)
          
          # Add API call info
          report['api_calls'] = {
              'total_count': total_calls,
              'service_breakdown': service_counts
          }
          
          # Add deployment duration
          elapsed_time = ${{ env.END_TIME }} - ${{ env.START_TIME }}
          report['overall_deployment_time_seconds'] = elapsed_time
          
          # Save updated report
          with open(report_file, 'w') as f:
              json.dump(report, f, indent=2)
          
          print(f"Total API calls: {total_calls}")
          print(f"Total deployment time: {elapsed_time} seconds")
          
          # Print service breakdown
          print("\nAPI calls by service:")
          for service, count in sorted(service_counts.items(), key=lambda x: x[1], reverse=True):
              print(f"  {service}: {count}")
          EOF
      
      #################################
      ## UPLOAD RESULTS
      #################################
      - name: Upload Deployment Results
        uses: actions/upload-artifact@v4
        with:
          name: deployment-results-${{ inputs.tool }}
          path: results/deployment/