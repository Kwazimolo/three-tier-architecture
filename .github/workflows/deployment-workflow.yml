# .github/workflows/deployment-workflow.yml

name: Deployment Analysis

on:
  workflow_call:
    inputs:
      tool:
        required: true
        type: string
        description: 'The IaC tool to analyse for deployment (terraform, cloudformation, opentofu)'
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  analyse-deployment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: terraform # Branch name
        
      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'
          
      - name: Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Install dependencies
        run: |
          pip install psutil boto3 awscli
          mkdir -p results/deployment
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.9.0"
      
      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: "1.9.0"
          
      - name: Prepare deployment
        run: |
          
          # Enable CloudTrail logging for API calls
          aws cloudtrail create-trail --name "DeploymentAnalysisTrail-$TIMESTAMP" \
            --s3-bucket-name tf-state-3tier-architecture \
            --s3-key-prefix cloudtrail \
            --is3-bucket-owner-check \
            || echo "Using default CloudTrail"
          
          # Record metrics start time
          echo "START_TIME=$(date +%s)" >> $GITHUB_ENV
          echo "Deployment starting at $(date)"
      
      #################################
      ## TERRAFORM DEPLOYMENT
      #################################
      - name: Deploy with Terraform
        if: inputs.tool == 'terraform' || inputs.tool == 'all'
        continue-on-error: true
        id: terraform-deploy
        run: |
          cd infrastructure/terraform
          
          # Measure init time
          INIT_START=$(date +%s)
          terraform init
          INIT_END=$(date +%s)
          
          # Measure apply time
          APPLY_START=$(date +%s)
          terraform apply -auto-approve
          APPLY_STATUS=$?
          APPLY_END=$(date +%s)
          
          # Calculate times
          INIT_DURATION=$((INIT_END - INIT_START))
          APPLY_DURATION=$((APPLY_END - APPLY_START))
          TOTAL_DURATION=$((APPLY_END - INIT_START))
          
          echo "Terraform init time: ${INIT_DURATION}s"
          echo "Terraform apply time: ${APPLY_DURATION}s"
          echo "Total deployment time: ${TOTAL_DURATION}s"
          
          # Create deployment report
          mkdir -p ../../results/deployment
          cat > ../../results/deployment/terraform_deployment_report.json << EOF
          {
            "tool": "terraform",
            "init_time_seconds": $INIT_DURATION,
            "apply_time_seconds": $APPLY_DURATION,
            "total_time_seconds": $TOTAL_DURATION,
            "success": $([ $APPLY_STATUS -eq 0 ] && echo "true" || echo "false"),
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          }
          EOF
          
          # Let the workflow know if this succeeded
          if [ $APPLY_STATUS -eq 0 ]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi
          
          # Record relevant environment variables for API collection
          echo "TERRAFORM_INIT_TIME=$INIT_DURATION" >> $GITHUB_ENV
          echo "TERRAFORM_APPLY_TIME=$APPLY_DURATION" >> $GITHUB_ENV
          echo "TERRAFORM_TOTAL_TIME=$TOTAL_DURATION" >> $GITHUB_ENV
          
          exit $APPLY_STATUS
      
      #################################
      ## OPENTOFU DEPLOYMENT
      #################################
      - name: Deploy with OpenTofu
        if: inputs.tool == 'opentofu' || inputs.tool == 'all'
        continue-on-error: true
        id: opentofu-deploy
        run: |
          cd infrastructure/opentofu
          
          # Measure init time
          INIT_START=$(date +%s)
          tofu init
          INIT_END=$(date +%s)
          
          # Measure apply time
          APPLY_START=$(date +%s)
          tofu apply -auto-approve
          APPLY_STATUS=$?
          APPLY_END=$(date +%s)
          
          # Calculate times
          INIT_DURATION=$((INIT_END - INIT_START))
          APPLY_DURATION=$((APPLY_END - APPLY_START))
          TOTAL_DURATION=$((APPLY_END - INIT_START))
          
          echo "OpenTofu init time: ${INIT_DURATION}s"
          echo "OpenTofu apply time: ${APPLY_DURATION}s"
          echo "Total deployment time: ${TOTAL_DURATION}s"
          
          # Create deployment report
          mkdir -p ../../results/deployment
          cat > ../../results/deployment/opentofu_deployment_report.json << EOF
          {
            "tool": "opentofu",
            "init_time_seconds": $INIT_DURATION,
            "apply_time_seconds": $APPLY_DURATION,
            "total_time_seconds": $TOTAL_DURATION,
            "success": $([ $APPLY_STATUS -eq 0 ] && echo "true" || echo "false"),
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          }
          EOF
          
          # Let the workflow know if this succeeded
          if [ $APPLY_STATUS -eq 0 ]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi
          
          # Record relevant environment variables for API collection
          echo "OPENTOFU_INIT_TIME=$INIT_DURATION" >> $GITHUB_ENV
          echo "OPENTOFU_APPLY_TIME=$APPLY_DURATION" >> $GITHUB_ENV
          echo "OPENTOFU_TOTAL_TIME=$TOTAL_DURATION" >> $GITHUB_ENV
          
          exit $APPLY_STATUS
      
      #################################
      ## CLOUDFORMATION DEPLOYMENT
      #################################
      - name: Deploy with CloudFormation
        if: inputs.tool == 'cloudformation' || inputs.tool == 'all'
        continue-on-error: true
        id: cloudformation-deploy
        run: |
          cd infrastructure/cloudformation
          
          # Set the stack name environment variable for later use
          STACK_NAME="three-tier-architecture"
          echo "STACK_NAME=$STACK_NAME" >> $GITHUB_ENV
          
          # Measure deployment time
          DEPLOY_START=$(date +%s)
          
          # Run the deployment script
          ./scripts/deploy.sh
          DEPLOY_STATUS=$?
          
          DEPLOY_END=$(date +%s)
          
          # Calculate time
          DEPLOY_DURATION=$((DEPLOY_END - DEPLOY_START))
          
          echo "CloudFormation deployment time: ${DEPLOY_DURATION}s"
          
          # If deployment failed, capture stack events for debugging
          if [ $DEPLOY_STATUS -ne 0 ]; then
            echo "Deployment failed. Collecting stack events for debugging..."
            aws cloudformation describe-stack-events --stack-name $STACK_NAME --region eu-west-1 > ../../results/deployment/cloudformation_stack_events.json || true
            
            # Note: Not deleting the stack as you'll handle cleanup separately
            echo "Deployment failed. Check stack events in the artifacts." > ../../results/deployment/cloudformation_deployment_failure.txt
          fi
          
          # Create deployment report
          mkdir -p ../../results/deployment
          cat > ../../results/deployment/cloudformation_deployment_report.json << EOF
          {
            "tool": "cloudformation",
            "stack_name": "$STACK_NAME",
            "deploy_time_seconds": $DEPLOY_DURATION,
            "total_time_seconds": $DEPLOY_DURATION,
            "success": $([ $DEPLOY_STATUS -eq 0 ] && echo "true" || echo "false"),
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          }
          EOF
          
          # Let the workflow know if this succeeded
          if [ $DEPLOY_STATUS -eq 0 ]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi
          
          # Record relevant environment variables for API collection
          echo "CLOUDFORMATION_DEPLOY_TIME=$DEPLOY_DURATION" >> $GITHUB_ENV
          
          exit $DEPLOY_STATUS
      
      #################################
      ## API CALLS COLLECTION
      #################################
      - name: Collect API calls for Terraform
        if: inputs.tool == 'terraform' || inputs.tool == 'all'
        continue-on-error: true
        run: |
          # Record end time
          END_TIME=$(date +%s)
          
          # Wait for CloudTrail events to be available
          echo "Waiting for CloudTrail events to be available..."
          sleep 30
          
          # Get CloudTrail events for the deployment
          aws cloudtrail lookup-events \
            --lookup-attributes AttributeKey=EventName,AttributeValue=Apply \
            > results/deployment/terraform_cloudtrail_events.json || true
          
          # Update deployment report with API calls
          python - << EOF
          import json
          import os
          
          try:
              # Load CloudTrail events
              with open('results/deployment/terraform_cloudtrail_events.json', 'r') as f:
                  events_data = json.load(f)
              
              # Count API calls by service
              service_counts = {}
              for event in events_data.get('Events', []):
                  if isinstance(event, dict) and 'CloudTrailEvent' in event:
                      try:
                          cloud_trail_event = json.loads(event['CloudTrailEvent'])
                          event_source = cloud_trail_event.get('eventSource', '')
                          
                          # Extract service name
                          if event_source:
                              service = event_source.split('.')[0]
                              if service not in service_counts:
                                  service_counts[service] = 0
                              service_counts[service] += 1
                      except Exception as e:
                          pass
              
              # Calculate total
              total_calls = sum(service_counts.values())
              
              # Load existing report
              report_file = 'results/deployment/terraform_deployment_report.json'
              with open(report_file, 'r') as f:
                  report = json.load(f)
              
              # Add API call info
              report['api_calls'] = {
                  'total_count': total_calls,
                  'service_breakdown': service_counts
              }
              
              # Save updated report
              with open(report_file, 'w') as f:
                  json.dump(report, f, indent=2)
              
              print(f"Total API calls for Terraform: {total_calls}")
              
          except Exception as e:
              print(f"Error collecting API calls for Terraform: {e}")
          EOF
      
      - name: Collect API calls for OpenTofu
        if: inputs.tool == 'opentofu' || inputs.tool == 'all'
        continue-on-error: true
        run: |
          # Record end time
          END_TIME=$(date +%s)
          
          # Wait for CloudTrail events to be available
          echo "Waiting for CloudTrail events to be available..."
          sleep 30
          
          # Get CloudTrail events for the deployment
          aws cloudtrail lookup-events \
            --lookup-attributes AttributeKey=EventName,AttributeValue=Apply \
            > results/deployment/opentofu_cloudtrail_events.json || true
          
          # Update deployment report with API calls
          python - << EOF
          import json
          import os
          
          try:
              # Load CloudTrail events
              with open('results/deployment/opentofu_cloudtrail_events.json', 'r') as f:
                  events_data = json.load(f)
              
              # Count API calls by service
              service_counts = {}
              for event in events_data.get('Events', []):
                  if isinstance(event, dict) and 'CloudTrailEvent' in event:
                      try:
                          cloud_trail_event = json.loads(event['CloudTrailEvent'])
                          event_source = cloud_trail_event.get('eventSource', '')
                          
                          # Extract service name
                          if event_source:
                              service = event_source.split('.')[0]
                              if service not in service_counts:
                                  service_counts[service] = 0
                              service_counts[service] += 1
                      except Exception as e:
                          pass
              
              # Calculate total
              total_calls = sum(service_counts.values())
              
              # Load existing report
              report_file = 'results/deployment/opentofu_deployment_report.json'
              with open(report_file, 'r') as f:
                  report = json.load(f)
              
              # Add API call info
              report['api_calls'] = {
                  'total_count': total_calls,
                  'service_breakdown': service_counts
              }
              
              # Save updated report
              with open(report_file, 'w') as f:
                  json.dump(report, f, indent=2)
              
              print(f"Total API calls for OpenTofu: {total_calls}")
              
          except Exception as e:
              print(f"Error collecting API calls for OpenTofu: {e}")
          EOF

      - name: Collect API calls for CloudFormation
        if: inputs.tool == 'cloudformation' || inputs.tool == 'all'
        continue-on-error: true
        run: |
          # Record end time
          END_TIME=$(date +%s)
          
          # Wait for CloudTrail events to be available
          echo "Waiting for CloudTrail events to be available..."
          sleep 30
          
          # Get CloudTrail events for the deployment
          aws cloudtrail lookup-events \
            --lookup-attributes AttributeKey=ResourceName,AttributeValue=three-tier-architecture \
            > results/deployment/cloudformation_cloudtrail_events.json || true
          
          # Update deployment report with API calls
          python - << EOF
          import json
          import os
          
          try:
              # Load CloudTrail events
              with open('results/deployment/cloudformation_cloudtrail_events.json', 'r') as f:
                  events_data = json.load(f)
              
              # Count API calls by service
              service_counts = {}
              for event in events_data.get('Events', []):
                  if isinstance(event, dict) and 'CloudTrailEvent' in event:
                      try:
                          cloud_trail_event = json.loads(event['CloudTrailEvent'])
                          event_source = cloud_trail_event.get('eventSource', '')
                          
                          # Extract service name
                          if event_source:
                              service = event_source.split('.')[0]
                              if service not in service_counts:
                                  service_counts[service] = 0
                              service_counts[service] += 1
                      except Exception as e:
                          pass
              
              # Calculate total
              total_calls = sum(service_counts.values())
              
              # Load existing report
              report_file = 'results/deployment/cloudformation_deployment_report.json'
              with open(report_file, 'r') as f:
                  report = json.load(f)
              
              # Add API call info
              report['api_calls'] = {
                  'total_count': total_calls,
                  'service_breakdown': service_counts
              }
              
              # Save updated report
              with open(report_file, 'w') as f:
                  json.dump(report, f, indent=2)
              
              print(f"Total API calls for CloudFormation: {total_calls}")
              
          except Exception as e:
              print(f"Error collecting API calls for CloudFormation: {e}")
          EOF
      
      #################################
      ## RESULTS SUMMARY
      #################################
      - name: Generate Deployment Summary
        run: |
          cat > results/deployment/deployment_summary.json << EOF
          {
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "tools": {
              "terraform": {
                "status": "${{ steps.terraform-deploy.outputs.status || 'not_run' }}",
                "init_time": "${{ env.TERRAFORM_INIT_TIME || 'N/A' }}",
                "apply_time": "${{ env.TERRAFORM_APPLY_TIME || 'N/A' }}",
                "total_time": "${{ env.TERRAFORM_TOTAL_TIME || 'N/A' }}"
              },
              "opentofu": {
                "status": "${{ steps.opentofu-deploy.outputs.status || 'not_run' }}",
                "init_time": "${{ env.OPENTOFU_INIT_TIME || 'N/A' }}",
                "apply_time": "${{ env.OPENTOFU_APPLY_TIME || 'N/A' }}",
                "total_time": "${{ env.OPENTOFU_TOTAL_TIME || 'N/A' }}"
              },
              "cloudformation": {
                "status": "${{ steps.cloudformation-deploy.outputs.status || 'not_run' }}",
                "deploy_time": "${{ env.CLOUDFORMATION_DEPLOY_TIME || 'N/A' }}"
              }
            }
          }
          EOF
          
          echo "Deployment summary generated at results/deployment/deployment_summary.json"
          
      #################################
      ## UPLOAD RESULTS
      #################################
      - name: Upload Deployment Results
        uses: actions/upload-artifact@v4
        with:
          name: deployment-results-${{ inputs.tool }}
          path: results/deployment/