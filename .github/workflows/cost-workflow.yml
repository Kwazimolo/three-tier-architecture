# .github/workflows/cost-workflow.yml

name: Cost Analysis

on:
  pull_request:
    branches:
      - main
    paths:
      - 'infrastructure/**'

  workflow_call:
    inputs:
      tool:
        required: true
        type: string
        description: 'The IaC tool to analyse for cost (terraform, cloudformation, opentofu)'
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      INFRACOST_API_KEY:
        required: true

jobs:
  analyse-cost:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: terraform # Branch name
        
      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Determine IaC Tool from PR
        id: determine-tool
        if: github.event_name == 'pull_request'
        run: |
          # Check which directory was modified in the PR
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          
          if echo "$CHANGED_FILES" | grep -q "infrastructure/terraform/"; then
            echo "tool=terraform" >> $GITHUB_OUTPUT
          elif echo "$CHANGED_FILES" | grep -q "infrastructure/cloudformation/"; then
            echo "tool=cloudformation" >> $GITHUB_OUTPUT
          elif echo "$CHANGED_FILES" | grep -q "infrastructure/opentofu/"; then
            echo "tool=opentofu" >> $GITHUB_OUTPUT
          else
            # Default to terraform if can't determine
            echo "tool=terraform" >> $GITHUB_OUTPUT
          fi
          
          echo "Determined tool: $(cat $GITHUB_OUTPUT | grep tool | cut -d'=' -f2)"
      
      - name: Set Tool Variable
        id: set-tool
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            TOOL="${{ steps.determine-tool.outputs.tool }}"
          else
            TOOL="${{ inputs.tool }}"
          fi
          echo "tool=$TOOL" >> $GITHUB_OUTPUT
          echo "Using IaC tool: $TOOL"
          
      - name: Create Results Directory
        run: |
          mkdir -p results/cost
          chmod 777 results/cost
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3 pyyaml
          
      - name: Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
      
      # Terraform/OpenTofu cost analysis
      - name: Run Infracost for Terraform/OpenTofu
        if: steps.set-tool.outputs.tool == 'terraform' || steps.set-tool.outputs.tool == 'opentofu'
        run: |
          # Install Infracost
          curl -fsSL https://raw.githubusercontent.com/infracost/infracost/master/scripts/install.sh | sh
          infracost --version
          infracost configure set api_key ${{ secrets.INFRACOST_API_KEY }}
          
          # Navigate to the tool's directory
          cd infrastructure/${{ steps.set-tool.outputs.tool }}
          
          # Init the project
          if [ "${{ steps.set-tool.outputs.tool }}" == "terraform" ]; then
            terraform init -backend=false
          else
            tofu init -backend=false
          fi
          
          # Generate cost estimate
          infracost breakdown --path . \
            --format json \
            --out-file ../../results/cost/${{ steps.set-tool.outputs.tool }}_infracost.json
          
          # Generate readable report
          infracost output \
            --path ../../results/cost/${{ steps.set-tool.outputs.tool }}_infracost.json \
            --format html \
            --out-file ../../results/cost/${{ steps.set-tool.outputs.tool }}_infracost_report.html
          
          infracost output \
            --path ../../results/cost/${{ steps.set-tool.outputs.tool }}_infracost.json \
            --format table \
            --out-file ../../results/cost/${{ steps.set-tool.outputs.tool }}_infracost_summary.txt
          
          # Display summary
          cat ../../results/cost/${{ steps.set-tool.outputs.tool }}_infracost_summary.txt
      
      # CloudFormation cost analysis
      - name: Run CloudFormation Cost Analysis
        if: steps.set-tool.outputs.tool == 'cloudformation'
        run: |
          # Navigate to CloudFormation directory
          cd infrastructure/cloudformation
          
          # Run the cost analyser script
          python ../../scripts/analysers/cloudformation_cost_analyser.py \
            --template templates/main.yml \
            --output ../../results/cost/cloudformation_cost_analysis.json
      
      # Generate comprehensive cost report
      - name: Generate cost report
        run: |
          echo "Generating cost report for tool: ${{ steps.set-tool.outputs.tool }}"
          # Use existing cost analyser script
          python scripts/analysers/cost_analyser.py \
            --tool "${{ steps.set-tool.outputs.tool }}" \
            --cost-data "results/cost" \
            --output "results/cost/${{ steps.set-tool.outputs.tool }}_cost_report.json"
      
      # Post PR comment with cost information if triggered by PR
      - name: Post Cost Analysis Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const tool = process.env.TOOL;
            let costSummary = '';
            
            try {
              if (tool === 'terraform' || tool === 'opentofu') {
                costSummary = fs.readFileSync(`results/cost/${tool}_infracost_summary.txt`, 'utf8');
              } else {
                // For CloudFormation, read the cost report and format it nicely
                const costData = JSON.parse(fs.readFileSync(`results/cost/${tool}_cost_report.json`, 'utf8'));
                costSummary = `# CloudFormation Cost Analysis\n\n` +
                  `Estimated monthly cost: $${costData.monthly_cost.toFixed(2)}\n\n` +
                  `## Breakdown by service:\n`;
                
                for (const [service, cost] of Object.entries(costData.resource_breakdown)) {
                  costSummary += `- ${service}: $${cost.toFixed(2)}\n`;
                }
                
                if (costData.cost_optimisation_opportunities && costData.cost_optimisation_opportunities.length > 0) {
                  costSummary += `\n## Optimisation opportunities:\n`;
                  costData.cost_optimisation_opportunities.forEach(opp => {
                    costSummary += `- ${opp.suggestion}\n`;
                  });
                }
              }
              
              const comment = `## Cost Analysis for ${tool}\n\n\`\`\`\n${costSummary}\n\`\`\``;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              
              console.log('Posted cost analysis comment to PR');
            } catch (error) {
              console.log(`Error posting comment: ${error}`);
              console.log('Will not post comment to PR');
            }
        env:
          TOOL: ${{ steps.set-tool.outputs.tool }}
      
      - name: Upload Cost Analysis Results
        uses: actions/upload-artifact@v4
        with:
          name: cost-results-${{ steps.set-tool.outputs.tool }}
          path: results/cost/