# .github/workflows/performance-workflow.yml

name: Performance Analysis

on:
  workflow_call:
    inputs:
      tool:
        required: true
        type: string
        description: 'The IaC tool to analyse for performance (terraform, cloudformation, opentofu)'
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  analyse-performance:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'
          
      - name: Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
          
      - name: Ensure results directory exists
        run: |
          mkdir -p results/performance
          
      - name: Download deployment results
        uses: actions/download-artifact@v4
        with:
          name: deployment-results-${{ inputs.tool }}
          path: results/deployment/
          
      - name: Install performance testing tools
        run: |
          pip install psutil matplotlib pandas
      
      - name: Prepare test environment
        run: |
          mkdir -p results/performance/${{ inputs.tool }}
          
      - name: Run performance tests
        run: |
          # Set up directory for test results
          mkdir -p results/performance/${{ inputs.tool }}
          
          # Determine the performance test command based on the tool
          if [ "${{ inputs.tool }}" == "terraform" ]; then
            cd terraform
            
            # Measure init performance
            python ../scripts/utils/resource_monitor.py \
              --command "terraform init" \
              --output "../results/performance/${{ inputs.tool }}/init_performance.json" \
              --interval 0.5
              
            # Measure plan performance
            python ../scripts/utils/resource_monitor.py \
              --command "terraform plan" \
              --output "../results/performance/${{ inputs.tool }}/plan_performance.json" \
              --interval 0.5
              
            # Measure validation performance
            python ../scripts/utils/resource_monitor.py \
              --command "terraform validate" \
              --output "../results/performance/${{ inputs.tool }}/validate_performance.json" \
              --interval 0.5
              
          elif [ "${{ inputs.tool }}" == "opentofu" ]; then
            cd opentofu
            
            # Measure init performance
            python ../scripts/utils/resource_monitor.py \
              --command "tofu init" \
              --output "../results/performance/${{ inputs.tool }}/init_performance.json" \
              --interval 0.5
              
            # Measure plan performance
            python ../scripts/utils/resource_monitor.py \
              --command "tofu plan" \
              --output "../results/performance/${{ inputs.tool }}/plan_performance.json" \
              --interval 0.5
              
            # Measure validation performance
            python ../scripts/utils/resource_monitor.py \
              --command "tofu validate" \
              --output "../results/performance/${{ inputs.tool }}/validate_performance.json" \
              --interval 0.5
              
          elif [ "${{ inputs.tool }}" == "cloudformation" ]; then
            cd cloudformation
            
            # Measure validation performance
            python ../scripts/utils/resource_monitor.py \
              --command "aws cloudformation validate-template --template-body file://main.yaml" \
              --output "../results/performance/${{ inputs.tool }}/validate_performance.json" \
              --interval 0.5
              
            # Measure changeset creation performance (dry run)
            python ../scripts/utils/resource_monitor.py \
              --command "aws cloudformation create-change-set --stack-name performance-test-stack --change-set-name test-changeset --template-body file://main.yaml --capabilities CAPABILITY_IAM" \
              --output "../results/performance/${{ inputs.tool }}/changeset_performance.json" \
              --interval 0.5
              
            # Clean up the changeset
            aws cloudformation delete-change-set --stack-name performance-test-stack --change-set-name test-changeset || true
          fi
          
      - name: Generate performance report
        run: |
          # Generate the comprehensive performance report
          python scripts/analysers/generate_performance_report.py \
            --tool ${{ inputs.tool }} \
            --data-dir results/performance/${{ inputs.tool }} \
            --output results/performance/${{ inputs.tool }}/performance_report.json
      
      - name: Generate performance visualizations
        run: |
          # Create charts directory
          mkdir -p results/performance/${{ inputs.tool }}/charts
          
          # Generate resource usage charts
          python scripts/utils/generate_resource_charts.py \
            --data-dir results/performance/${{ inputs.tool }} \
            --output-dir results/performance/${{ inputs.tool }}/charts \
            --tool ${{ inputs.tool }}
          
      - name: Upload Performance Results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results-${{ inputs.tool }}
          path: results/performance/